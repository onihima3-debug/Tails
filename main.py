# main.py
import os
import re
import asyncio
import threading
from flask import Flask

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)

# ---------- –º–∏–Ω–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ----------
app_flask = Flask(__name__)

@app_flask.route("/")
def home():
    return "Tails Wizard Bot is running!"

def run_flask():
    app_flask.run(host="0.0.0.0", port=8080)

threading.Thread(target=run_flask, daemon=True).start()
# ---------------------------------------------------------------

# ---------- —Å–æ—Å—Ç–æ—è–Ω–∏—è ----------
START, WAIT_COOKIE, WAIT_CODE, END_MENU = range(4)

# ---------- –∫–Ω–æ–ø–∫–∏ ----------
BTN_WHO = "–ö—Ç–æ —Ç—ã?"
BTN_YES_STORY = "–î–∞, —Ä–∞—Å—Å–∫–∞–∂–µ—à—å –º–Ω–µ —á—Ç–æ-—Ç–æ?"
BTN_NO = "–ù–µ—Ç"

def kb_start():
    return ReplyKeyboardMarkup([[BTN_WHO]], resize_keyboard=True)

def kb_end():
    return ReplyKeyboardMarkup([[BTN_NO, BTN_YES_STORY]], resize_keyboard=True)

# ---------- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
SECRET_CODE = "28082003"
MAX_CODE_ATTEMPTS = 3

# ---------- —É—Ç–∏–ª–∏—Ç—ã ----------
def norm(s: str) -> str:
    return (s or "").lower().strip()

def is_exact_cookie(text: str) -> bool:
    """–¢–æ–ª—å–∫–æ —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ: '–ø–µ—á–µ–Ω—å–µ' –∏–ª–∏ '–ø–µ—á–µ–Ω—å–∫–∞'."""
    t = norm(text)
    if not re.fullmatch(r"[–∞-—è—ë]+", t):
        return False
    return t in ("–ø–µ—á–µ–Ω—å–µ", "–ø–µ—á–µ–Ω—å–∫–∞")

async def type_and_send(chat, text: str, delay: float = 1.6, remove_kb=False):
    await chat.send_action(ChatAction.TYPING)
    await asyncio.sleep(delay)
    if remove_kb:
        await chat.send_message(text, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
    else:
        await chat.send_message(text, parse_mode="HTML")

async def send_block(chat, lines, per_line_delay: float = 1.3, remove_kb=False):
    for i, line in enumerate(lines):
        if i == 0 and remove_kb:
            await type_and_send(chat, line, delay=per_line_delay, remove_kb=True)
        else:
            await type_and_send(chat, line, delay=per_line_delay)

# ---------- —Å—é–∂–µ—Ç–Ω—ã–µ –∫—É—Å–∫–∏ ----------
async def start_quest(chat):
    await send_block(chat, [
        "–Ø —Ç–∞–∫ –ø–æ–Ω–∏–º–∞—é, —Ç—ã –Ω–∞ –∫–≤–µ—Å—Ç, —Ä–∞–∑ –ø—Ä–∏—à—ë–ª –∫–æ –º–Ω–µ",
        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Ç–µ–±—è –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—É—Ç—å, –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –º–∞–≥–∏—á–µ—Å–∫–∏–π –æ–±–º–µ–Ω üåü",
        "–Ø –±—ã –∏ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –ø–æ–º–æ–≥, –Ω–æ —Ç–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –º–∞–≥–∏–∏, —Ç—ã –ø—Ä–æ—Å—Ç–∏. –î–∞–∂–µ –≤—ã–¥–∞—é—â–∏–π—Å—è —É—á—ë–Ω—ã–π —Ç—É—Ç –±–µ—Å—Å–∏–ª–µ–Ω, —ç—Ö.",
        "–î–∞–π –º–Ω–µ —Ç–æ, —á—Ç–æ —è –ª—é–±–ª—é –≤—Å–µ–º —Å–µ—Ä–¥—Ü–µ–º! üåå",
    ], per_line_delay=1.3, remove_kb=True)
    await chat.send_message("–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫—Ä—É–≥–ª–æ–µ, –æ–±—ã—á–Ω–æ –∫ —á–∞—é üç™",
                            reply_markup=ReplyKeyboardRemove())

# ---------- —Ö–µ–Ω–¥–ª–µ—Ä—ã ----------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    context.user_data["code_attempts"] = 0
    await type_and_send(chat, "–ü—Ä–∏–≤–µ—Ç, —Å—Ç—Ä–∞–Ω–Ω–∏–∫! –¢–µ–±–µ –Ω—É–∂–Ω–∞ –º–æ—è –ø–æ–º–æ—â—å? ü™Ñ", remove_kb=True)
    await chat.send_message("–í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ:", reply_markup=kb_start())  # –∫–Ω–æ–ø–∫–∞ —Ç–æ—á–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è
    return START

async def on_start_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if norm(update.message.text) == norm(BTN_WHO):
        await send_block(chat, [
            "–Ø ‚Äî –≤–æ–ª—à–µ–±–Ω–∏–∫! –¢–æ—Ç —Å–∞–º—ã–π, –∏–∑ —Å–∫–∞–∑–æ–∫! üí´",
            "–ü—Ä–∞–≤–¥–∞‚Ä¶",
            "–Ø –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–∞ —ç—Ç–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∞ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —è —É—á—ë–Ω—ã–π‚Ä¶",
            "–ù–æ –ª–∞–¥–Ω–æ! –Ø –±—É–¥—É —Ä–∞–¥ —Ç–µ–±–µ –ø–æ–º–æ—á—å, —Å–¥–µ–ª–∞—é –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ!",
        ], remove_kb=True)
        await start_quest(chat)
        return WAIT_COOKIE

    await type_and_send(chat, "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ö—Ç–æ —Ç—ã?¬ª –Ω–∏–∂–µ.")
    return START

async def wait_cookie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if is_exact_cookie(update.message.text):
        await send_block(chat, [
            "–£—Ö, —É–≥–∞–¥–∞–ª, –º–æ–ª–æ–¥–µ—Ü! üåÄ",
            "–•–æ—Ä–æ—à–æ. –†–∞–∑–≥–∞–¥–∞–µ—à—å –∑–∞–≥–∞–¥–∫—É ‚Äî –ø–æ–ª—É—á–∏—à—å –ø–æ–¥—Å–∫–∞–∑–∫—É! üå†",
            "<i>–û–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å. –ù–æ —Å–≤–µ—Ç –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º‚Ä¶</i>",
            "<i>–ù–∞–π–¥–∏ –µ—ë. –í—á–µ—Ä–∞ –æ–Ω–∞ —Å–∏—è–ª–∞. –°–µ–≥–æ–¥–Ω—è ‚Äî –æ–Ω–∞ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∞‚Ä¶</i>",
            "<i>–û—Ç–≤–µ—Ç –ª–µ–∂–∏—Ç —É –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å–Ω–∏—Ü—ã –ö–æ—Ç–∞ –≤–æ –§—Ä–∞–∫–µ‚Ä¶</i>",
        ], remove_kb=True)
        await chat.send_message("–ö–æ–≥–¥–∞ –Ω–∞–π–¥—ë—à—å –∫–æ–¥ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –µ–≥–æ —Å—é–¥–∞ —á–∏—Å–ª–æ–º.",
                                reply_markup=ReplyKeyboardRemove())
        context.user_data["code_attempts"] = 0
        return WAIT_CODE

    await type_and_send(chat, "–ù—É–∂–Ω–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ.")
    return WAIT_COOKIE

async def wait_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    code = norm(update.message.text).replace(" ", "")
    attempts = int(context.user_data.get("code_attempts", 0))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
    if code == SECRET_CODE:
        await send_block(chat, [
            "–ò —Å–Ω–æ–≤–∞ —É–≥–∞–¥–∞–ª! üéä",
            "–î–∞ –ø—Ä–∏–±—É–¥–µ—Ç —Ç–µ–º, –∫—Ç–æ –∏—â–µ—Ç üçÄ",
            "–£–¥–∞—á–∏, —Å—Ç—Ä–∞–Ω–Ω–∏–∫! –Ø —Å —Ç–æ–±–æ–π –º—ã—Å–ª–µ–Ω–Ω–æ ‚ú®",
        ], per_line_delay=1.5, remove_kb=True)
        await send_block(chat, ["–ú–æ–≥—É –ª–∏ —è —Ç–µ–±–µ –µ—â—ë —á–µ–º-—Ç–æ –ø–æ–º–æ—á—å?"], per_line_delay=1.2)
        await chat.send_message("–í—ã–±–µ—Ä–∏:", reply_markup=kb_end())
        return END_MENU

    # –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π
    attempts += 1
    context.user_data["code_attempts"] = attempts
    left = MAX_CODE_ATTEMPTS - attempts

    if left > 0:
        await type_and_send(chat, f"–ù–µ —Ç–æ—Ç –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {left}. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return WAIT_CODE
    else:
        await send_block(chat, [
            "–£–≤—ã, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.",
            "–ü—É—Å—Ç—å —É–¥–∞—á–∞ —É–ª—ã–±–Ω—ë—Ç—Å—è —Ç–µ–±–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.",
            "–ü—Ä–æ—â–∞–π, –ø—É—Ç–Ω–∏–∫.",
        ], remove_kb=True)
        return ConversationHandler.END

async def end_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    choice = norm(update.message.text)

    if choice == norm(BTN_NO):
        await type_and_send(chat, "–•–æ—Ä–æ—à–æ! –£–¥–∞—á–∏, –ø—É—Ç–Ω–∏–∫ ü§ó", delay=1.4, remove_kb=True)
        return ConversationHandler.END

    if choice == norm(BTN_YES_STORY):
        await send_block(chat, [
            "–†–∞—Å—Å–∫–∞–∑–∞—Ç—å?‚Ä¶",
            "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ?‚Ä¶",
            "–•–º–º–º‚Ä¶",
            "*–∑–∞–¥—É–º—á–∏–≤—ã–π –≤–∏–¥*",
            "–ó–Ω–∞–µ—à—å‚Ä¶",
            "–£ –º–µ–Ω—è –µ—Å—Ç—å –ª—É—á—à–∏–π –¥—Ä—É–≥.",
            "–ú—ã –Ω–µ —Ä–∞–∑–ª–µ–π –≤–æ–¥–∞!",
            "–ò‚Ä¶",
            "–ú–Ω–µ –∑–∞–ø–æ–º–Ω–∏–ª–∞—Å—å –Ω–∞—à–∞ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞.",
            "–£–≤–∏–¥–µ–≤ –µ–≥–æ –≤–ø–µ—Ä–≤—ã–µ, —è –ø–æ–¥—É–º–∞–ª: ¬´–û–≥–æ, –∫–∞–∫–æ–π –∫—Ä—É—Ç–æ–π!¬ª",
            "–û–Ω —É–≤–∏–¥–µ–ª, –∫–∞–∫ —è –æ—Ç–æ—Ä–æ–ø–µ–ª, –∏ —Å–∫–∞–∑–∞–ª –æ–¥–Ω—É –ø—Ä–æ—Å—Ç—É—é –≤–µ—â—å, —á—Ç–æ —è –∑–∞–ø–æ–º–Ω–∏–ª –Ω–∞–≤—Å–µ–≥–¥–∞:",
            "¬´–ù–µ –≤–æ–ª–Ω—É–π—Å—è, –¢–µ–π–ª–∑. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –±—ã—Ç—å —Å–æ–±–æ–π¬ª.",
            "–≠—Ç–æ –ø–æ–º–æ–≥–ª–æ –º–Ω–µ —Å—Ç–∞—Ç—å —Ç–µ–º, –∫–æ–≥–æ –≤—Å–µ –∑–Ω–∞—é—Ç –∫–∞–∫ –¢–µ–π–ª–∑!",
            "–¢–µ–ø–µ—Ä—å —è –µ–º –≤–∫—É—Å–Ω–µ–π—à–µ–µ –ø–µ—á–µ–Ω—å–µ –∏ —Ä–∞–¥—É—é—Å—å –∂–∏–∑–Ω–∏ üòù",
            "–ú–æ–∂–µ—Ç‚Ä¶ —Ç–µ–±–µ —ç—Ç–æ –∫–∞–∫-—Ç–æ –ø–æ–º–æ–∂–µ—Ç?",
            "–ù–∞–¥–µ—é—Å—å, –¥–∞‚Ä¶",
            "–•–∞-—Ö–∞! –ù—É –ª–∞–¥–Ω–æ, —Ç–µ–±–µ –ø–æ—Ä–∞, –¥—Ä—É–≥!",
            "–ß—Ç–æ-—Ç–æ —è –∑–∞–±–æ–ª—Ç–∞–ª—Å—è üòÑ",
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É—à—ë–ª –Ω–µ —Å—Ä–∞–∑—É! –≠—Ç–æ –Ω–µ–æ–±—ã—á–Ω–æ, –∏ —è —Ç–∞–∫ —Ä–∞–¥ üòá",
            "–ë–µ—Ä–µ–≥–∏ —Å–µ–±—è, –¥–∞ –ø—Ä–∏–±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π —É–¥–∞—á–∞! üèµÔ∏è",
        ], per_line_delay=1.2, remove_kb=True)
        return ConversationHandler.END

    await send_block(chat, ["–ú–æ–≥—É –ª–∏ —è —Ç–µ–±–µ –µ—â—ë —á–µ–º-—Ç–æ –ø–æ–º–æ—á—å?"], per_line_delay=1.2)
    await chat.send_message("–í—ã–±–µ—Ä–∏:", reply_markup=kb_end())
    return END_MENU

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n/help ‚Äî –ø–æ–º–æ—â—å\n\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –∫—Ä—É–≥–ª–æ–µ –∫ —á–∞—é üç™"
    )

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def build_app():
    token = os.environ.get("BOT_TOKEN")
    if not token:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

    app = ApplicationBuilder().token(token).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", cmd_start)],
        states={
            START: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_start_choice)],
            WAIT_COOKIE: [MessageHandler(filters.TEXT & ~filters.COMMAND, wait_cookie)],
            WAIT_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, wait_code)],
            END_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, end_menu)],
        },
        fallbacks=[CommandHandler("help", cmd_help), CommandHandler("cancel", cmd_cancel)],
        allow_reentry=True,
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("cancel", cmd_cancel))
    return app

if __name__ == "__main__":
    application = build_app()
    print("Bot is up. Press Ctrl+C to stop.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)
