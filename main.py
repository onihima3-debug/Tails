import os
import asyncio
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)

# -------- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ --------
(
    START,
    AFTER_WHO,
    WAIT_COOKIE,
    WAIT_CODE,
    OFFSCRIPT_MENU,
    END,
) = range(6)

# -------- –ö–Ω–æ–ø–∫–∏ --------
BTN_QUEST = "–î–∞, —è –Ω–∞ –∫–≤–µ—Å—Ç"
BTN_WHO = "–ö—Ç–æ —Ç—ã?"
BTN_YES_STORY = "–î–∞, —Ä–∞—Å—Å–∫–∞–∂–µ—à—å –º–Ω–µ —á—Ç–æ-—Ç–æ?"
BTN_NO = "–ù–µ—Ç"

def kb_start():
    return ReplyKeyboardMarkup([[BTN_QUEST, BTN_WHO]], resize_keyboard=True)

def kb_after_who():
    return ReplyKeyboardMarkup([[BTN_QUEST]], resize_keyboard=True)

def kb_offscript():
    return ReplyKeyboardMarkup([[BTN_NO, BTN_YES_STORY]], resize_keyboard=True)

# -------- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã --------
COOKIE_WORDS = {"–ø–µ—á–µ–Ω—å–µ", "–ø–µ—á–µ–Ω—å–∫–∞", "–ø–µ—á–µ–Ω—å–∫–∏", "–ø–µ—á–µ–Ω—é—à–∫–∞", "cookie", "cookies", "üç™"}
SECRET_CODE = "28082003"

# -------- –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ --------
def norm(s: str) -> str:
    return (s or "").strip().lower()

async def type_and_send(chat, text, delay=0.8):
    await chat.send_action(ChatAction.TYPING)
    await asyncio.sleep(delay)
    await chat.send_message(text)

# -------- –•–µ–Ω–¥–ª–µ—Ä—ã --------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    await type_and_send(chat, "–ë–æ—Ç: –ü—Ä–∏–≤–µ—Ç, —Å—Ç—Ä–∞–Ω–Ω–∏–∫! –¢–µ–±–µ –Ω—É–∂–Ω–∞ –º–æ—è –ø–æ–º–æ—â—å?ü™Ñ")
    await chat.send_message("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:", reply_markup=kb_start())
    return START

async def on_start_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    choice = norm(update.message.text)

    if choice == norm(BTN_WHO) or choice == "[–∫—Ç–æ —Ç—ã?]":
        await type_and_send(chat, "–ë–æ—Ç: –Ø - –≤–æ–ª—à–µ–±–Ω–∏–∫! –¢–æ—Ç —Å–∞–º—ã–π, –∏–∑ —Å–∫–∞–∑–æ–∫! üí´")
        await type_and_send(chat, "–ë–æ—Ç: –ü—Ä–∞–≤–¥–∞‚Ä¶")
        await type_and_send(chat, "–ë–æ—Ç: –Ø –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–∞ —ç—Ç–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –º–Ω–µ –Ω—É–∂–Ω–æ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∑–∞–º–µ–Ω–∏—Ç—å, –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —è —É—á—ë–Ω—ã–π‚Ä¶")
        await type_and_send(chat, "–ë–æ—Ç: –ù–æ –ª–∞–¥–Ω–æ! –Ø –±—É–¥—É —Ä–∞–¥ —Ç–µ–±–µ –ø–æ–º–æ—á—å, —Å–¥–µ–ª–∞—é –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ!")
        await chat.send_message("–ü—Ä–æ–¥–æ–ª–∂–∏–º?", reply_markup=kb_after_who())
        return AFTER_WHO

    if choice == norm(BTN_QUEST) or choice in {"—è –Ω–∞ –∫–≤–µ—Å—Ç", "[—è –Ω–∞ –∫–≤–µ—Å—Ç/–¥–∞, —è –Ω–∞ –∫–≤–µ—Å—Ç]"}:
        await type_and_send(chat, "–ë–æ—Ç: –ö–≤–µ—Å—Ç? –û—Ö, —á—É–¥–µ—Å–Ω–æ! –ù–µ–ª–µ–≥–∫–æ –Ω–∞—á–∏–Ω–∞—Ç—å, –Ω–æ —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!")
        await type_and_send(chat, "–ë–æ—Ç: –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã —è —Å–º–æ–≥ —Ç–µ–±—è –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—É—Ç—å - –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –º–∞–≥–∏—á–µ—Å–∫–∏–π –æ–±–º–µ–Ωüåü")
        await type_and_send(chat, "–ë–æ—Ç: –Ø –±—ã –∏ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –ø–æ–º–æ–≥, –Ω–æ —Ç–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –º–∞–≥–∏–∏, —Ç—ã –ø—Ä–æ—Å—Ç–∏. –î–∞–∂–µ –≤—ã–¥–∞—é—â–∏–π—Å—è —É—á—ë–Ω—ã–π —Ç—É—Ç –±–µ—Å—Å–∏–ª–µ–Ω, —ç—Ö.")
        await type_and_send(chat, "–ë–æ—Ç: –î–∞–π –º–Ω–µ —Ç–æ, —á—Ç–æ —è –ª—é–±–ª—é –≤—Å–µ–º —Å–µ—Ä–¥—Ü–µ–º!üåå")
        await chat.send_message("–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫—Ä—É–≥–ª–æ–µ, –æ–±—ã—á–Ω–æ –∫ —á–∞—é üç™", reply_markup=ReplyKeyboardRemove())
        return WAIT_COOKIE

    # –Ω–µ –ø–æ —Å–∫—Ä–∏–ø—Ç—É
    await type_and_send(chat, "–ë–æ—Ç: –•–º?üò≤")
    await type_and_send(chat, "–ë–æ—Ç: –ß—Ç–æ-—Ç–æ –µ—â—ë?ü§î")
    await chat.send_message("–í—ã–±–µ—Ä–∏:", reply_markup=kb_offscript())
    return OFFSCRIPT_MENU

async def after_who(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update.message.text = BTN_QUEST
    return await on_start_choice(update, context)

async def wait_cookie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    text = update.message.text or ""
    answer = "üç™" if "üç™" in text else norm(text)

    if any(w in answer for w in COOKIE_WORDS):
        await type_and_send(chat, "–ë–æ—Ç: –£—Ö, —É–≥–∞–¥–∞–ª, –º–æ–ª–æ–¥–µ—Ü! üåÄ")
        await type_and_send(chat, "–ë–æ—Ç: –•–æ—Ä–æ—à–æ. –†–∞–∑–≥–∞–¥–∞–µ—à—å –∑–∞–≥–∞–¥–∫—É - –ø–æ–ª—É—á–∏—à—å –ø–æ–¥—Å–∫–∞–∑–∫—É! üå†")
        await type_and_send(chat, "–ë–æ—Ç: –û–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å. –ù–æ —Å–≤–µ—Ç –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º‚Ä¶.")
        await type_and_send(chat, "–ë–æ—Ç: –ù–∞–π–¥–∏ –µ—ë. –í—á–µ—Ä–∞ –æ–Ω–∞ —Å–∏—è–ª–∞. –°–µ–≥–æ–¥–Ω—è - –æ–Ω–∞ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∞‚Ä¶")
        await type_and_send(chat, "–ë–æ—Ç: –æ—Ç–≤–µ—Ç –ª–µ–∂–∏—Ç —É –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å–Ω–∏—Ü—ã –ö–æ—Ç–∞ –≤–æ –§—Ä–∞–∫–µ‚Ä¶")
        await chat.send_message("–ö–æ–≥–¥–∞ –Ω–∞–π–¥—ë—à—å –∫–æ–¥ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –µ–≥–æ —Å—é–¥–∞ —á–∏—Å–ª–æ–º.")
        return WAIT_CODE

    await type_and_send(chat, "–ë–æ—Ç: –•–º?üò≤")
    await type_and_send(chat, "–ë–æ—Ç: –ß—Ç–æ-—Ç–æ –µ—â—ë?ü§î")
    await chat.send_message("–í—ã–±–µ—Ä–∏:", reply_markup=kb_offscript())
    return OFFSCRIPT_MENU

async def wait_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    code = norm(update.message.text).replace(" ", "")
    if code == SECRET_CODE:
        await type_and_send(chat, "–ë–æ—Ç: –ò —Å–Ω–æ–≤–∞ —É–≥–∞–¥–∞–ª! üéä")
        await type_and_send(chat, "–ë–æ—Ç: –î–∞ –ø—Ä–∏–±—É–¥–µ—Ç —Ç–µ–º, –∫—Ç–æ –∏—â–µ—ÇüçÄ")
        await type_and_send(chat, "–ë–æ—Ç: –£–¥–∞—á–∏, —Å—Ç—Ä–∞–Ω–Ω–∏–∫! –Ø —Å —Ç–æ–±–æ–π –º—ã—Å–ª–µ–Ω–Ω–æ‚ú®")
        return END

    await type_and_send(chat, "–ë–æ—Ç: –•–º?üò≤")
    await type_and_send(chat, "–ë–æ—Ç: –ß—Ç–æ-—Ç–æ –µ—â—ë?ü§î")
    await chat.send_message("–í—ã–±–µ—Ä–∏:", reply_markup=kb_offscript())
    return OFFSCRIPT_MENU

async def offscript_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    choice = norm(update.message.text)

    if choice == norm(BTN_NO):
        await type_and_send(chat, "–ë–æ—Ç: –•–æ—Ä–æ—à–æ! –£–¥–∞—á–∏, –ø—É—Ç–Ω–∏–∫ü§ó", delay=0.5)
        return END

    if choice == norm(BTN_YES_STORY):
        lines = [
            "–ë–æ—Ç: –†–∞—Å—Å–∫–∞–∑–∞—Ç—å?‚Ä¶",
            "–ë–æ—Ç: –ß—Ç–æ –∏–º–µ–Ω–Ω–æ?‚Ä¶",
            "–ë–æ—Ç: –•–º–º–º‚Ä¶",
            "–ë–æ—Ç: *–∑–∞–¥—É–º—á–∏–≤—ã–π –≤–∏–¥*",
            "–ë–æ—Ç: –ó–Ω–∞–µ—à—å‚Ä¶",
            "–ë–æ—Ç: –£ –º–µ–Ω—è –µ—Å—Ç—å –ª—É—á—à–∏–π –¥—Ä—É–≥.",
            "–ë–æ—Ç: –ú—ã –Ω–µ —Ä–∞–∑–ª–µ–π –≤–æ–¥–∞!",
            "–ë–æ—Ç: –ò‚Ä¶",
            "–ë–æ—Ç: –ú–Ω–µ –∑–∞–ø–æ–º–Ω–∏–ª–∞—Å—å –Ω–∞—à–∞ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞.",
            "–ë–æ—Ç: –£–≤–∏–¥–µ–≤ –µ–≥–æ –≤-–ø–µ—Ä–≤—ã–µ, —è –ø–æ–¥—É–º–∞–ª: ¬´–û–≥–æ, –∫–∞–∫–æ–π –∫—Ä—É—Ç–æ–π!¬ª",
            "–ë–æ—Ç: –û–Ω —É–≤–∏–¥–µ–ª, –∫–∞–∫ —è –æ—Ç–æ—Ä–æ–ø–µ–ª –∏ —Å–∫–∞–∑–∞–ª –æ–¥–Ω—É –ø—Ä–æ—Å—Ç—É—é –≤–µ—â—å, —á—Ç–æ —è –∑–∞–ø–æ–º–Ω–∏–ª –Ω–∞–≤—Å–µ–≥–¥–∞:",
            "–ë–æ—Ç: ¬´–ù–µ –≤–æ–ª–Ω—É–π—Å—è, –¢–µ–π–ª–∑. –ì–ª–∞–≤–Ω–æ–µ - –±—ã—Ç—å —Å–æ–±–æ–π¬ª.",
            "–ë–æ—Ç: –≠—Ç–æ –ø–æ–º–æ–≥–ª–æ –º–Ω–µ —Å—Ç–∞—Ç—å —Ç–µ–º, –∫–æ–≥–æ –≤—Å–µ –∑–Ω–∞—é—Ç –∫–∞–∫ –¢–µ–π–ª–∑!",
            "–ë–æ—Ç: –¢–µ–ø–µ—Ä—å —è –µ–º –≤–∫—É—Å–Ω–µ–π—à–µ–µ –ø–µ—á–µ–Ω—å–µ –∏ —Ä–∞–¥—É—é—Å—å –∂–∏–∑–Ω–∏üòù",
            "–ë–æ—Ç: –ú–æ–∂–µ—Ç‚Ä¶—Ç–µ–±–µ —ç—Ç–æ –∫–∞–∫-—Ç–æ –ø–æ–º–æ–∂–µ—Ç?",
            "–ë–æ—Ç: –ù–∞–¥–µ—é—Å—å, –¥–∞‚Ä¶",
            "–ë–æ—Ç: –•–∞-—Ö–∞! –ù—É –ª–∞–¥–Ω–æ, —Ç–µ–±–µ –ø–æ—Ä–∞, –¥—Ä—É–≥!",
            "–ë–æ—Ç: –ß—Ç–æ-—Ç–æ —è –∑–∞–±–æ–ª—Ç–∞–ª—Å—èüòÑ",
            "–ë–æ—Ç: –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É—à—ë–ª –Ω–µ —Å—Ä–∞–∑—É! –≠—Ç–æ –Ω–µ–æ–±—ã—á–Ω–æ –∏ —è —Ç–∞–∫ —Ä–∞–¥üòá",
            "–ë–µ—Ä–µ–≥–∏ —Å–µ–±—è, –¥–∞ –ø—Ä–∏–±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π —É–¥–∞—á–∞!üèµÔ∏è",
        ]
        for line in lines:
            await type_and_send(chat, line, delay=0.6)
        return END

    await type_and_send(chat, "–ë–æ—Ç: –•–º?üò≤")
    await type_and_send(chat, "–ë–æ—Ç: –ß—Ç–æ-—Ç–æ –µ—â—ë?ü§î")
    await chat.send_message("–í—ã–±–µ—Ä–∏:", reply_markup=kb_offscript())
    return OFFSCRIPT_MENU

async def fallback_any(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    await type_and_send(chat, "–ë–æ—Ç: –•–º?üò≤")
    await type_and_send(chat, "–ë–æ—Ç: –ß—Ç–æ-—Ç–æ –µ—â—ë?ü§î")
    await chat.send_message("–í—ã–±–µ—Ä–∏:", reply_markup=kb_offscript())
    return OFFSCRIPT_MENU

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –Ω–∞—á–∞—Ç—å\n/help ‚Äî –ø–æ–º–æ—â—å\n\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤–æ–ª—à–µ–±–Ω–∏–∫—É –Ω—Ä–∞–≤–∏—Ç—Å—è –∫—Ä—É–≥–ª–æ–µ –∫ —á–∞—é üç™"
    )

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                                    reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    token = os.environ.get("BOT_TOKEN")
    if not token:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

    app = ApplicationBuilder().token(token).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", cmd_start)],
        states={
            START: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_start_choice)],
            AFTER_WHO: [MessageHandler(filters.TEXT & ~filters.COMMAND, after_who)],
            WAIT_COOKIE: [MessageHandler(filters.TEXT & ~filters.COMMAND, wait_cookie)],
            WAIT_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, wait_code)],
            OFFSCRIPT_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, offscript_menu)],
            END: [MessageHandler(filters.TEXT & ~filters.COMMAND, fallback_any)],
        },
        fallbacks=[
            CommandHandler("help", cmd_help),
            CommandHandler("cancel", cmd_cancel),
            MessageHandler(filters.ALL, fallback_any),
        ],
        allow_reentry=True,
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("cancel", cmd_cancel))

    print("Bot is up. Press Ctrl+C to stop.")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
